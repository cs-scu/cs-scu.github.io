تحلیل جامع و ساختاری پروژه وب‌سایت انجمن علمی
این سند به تشریح کامل معماری، منطق و جریان داده در پروژه وب‌سایت انجمن علمی علوم کامپیوتر می‌پردازد. هدف، ارائه یک دید عمیق و خط به خط از نحوه عملکرد سیستم، از ظاهر بصری (Frontend) تا ارتباط با پایگاه داده (Backend)، است.

بخش ۱: معماری کلی و فلسفه طراحی
پروژه شما بر اساس یک معماری مدرن و کارآمد وب ساخته شده است که دو جزء اصلی دارد:

برنامه تک‌صفحه‌ای (Single Page Application - SPA): وب‌سایت شما یک SPA است. این به آن معناست که کاربر در واقع فقط یک فایل HTML اصلی (index.html) را بارگذاری می‌کند و تمام تغییرات بعدی در محتوا و جابجایی بین صفحات (مانند رفتن از صفحه اصلی به اخبار یا ورود) به صورت پویا و با استفاده از JavaScript انجام می‌شود. این رویکرد تجربه‌ی کاربری بسیار روان و سریعی را به ارمغان می‌آورد، زیرا دیگر نیازی به بارگذاری مجدد کامل صفحه از سرور برای هر کلیک نیست. هسته‌ی این معماری توسط ماژول router.js مدیریت می‌شود.

بک‌اند به عنوان سرویس (Backend as a Service - BaaS): به جای ساختن یک سرور و پایگاه داده اختصاصی از صفر، پروژه از Supabase به عنوان بک‌اند کامل استفاده می‌کند. Supabase تمام نیازهای سمت سرور را فراهم می‌کند، از جمله:

پایگاه داده Postgres: برای ذخیره‌سازی اطلاعات ساختاریافته مانند اخبار، رویدادها و پروفایل کاربران.

سیستم احراز هویت (Authentication): برای مدیریت کامل فرآیندهای ثبت‌نام، ورود، خروج، فراموشی رمز عبور و نقش‌های کاربری.

ذخیره‌سازی فایل (Storage): برای نگهداری فایل‌های استاتیک مانند تصاویر اعضا یا کاور نشریات.

API خودکار: Supabase به صورت خودکار یک API امن (RESTful) برای تمام جداول پایگاه داده شما ایجاد می‌کند که ما از طریق کتابخانه supabase-js با آن تعامل داریم.

این معماری (SPA + BaaS) به شما اجازه می‌دهد تا تمام تمرکز خود را روی توسعه‌ی رابط کاربری و تجربه کاربری بگذارید، در حالی که پیچیدگی‌های سمت سرور توسط یک سرویس قابل اعتماد و مقیاس‌پذیر مدیریت می‌شود.

بخش ۲: ساختار فایل‌ها و تشریح هر بخش
بیایید نگاهی عمیق به هر فایل و ماژول در پروژه بیندازیم.

فایل‌های HTML (اسکلت برنامه)
index.html: این فایل، نقطه ورود اصلی و تنها فایل HTML واقعی است که مرورگر کاربر بارگذاری می‌کند. تمام فایل‌های CSS و JavaScript اصلی به این فایل متصل هستند. این فایل شامل ساختار کلی صفحه است: هدر، فوتر، و یک تگ <main> که به عنوان یک "ظرف" عمل می‌کند و محتوای صفحات مختلف (خانه، اخبار، تماس با ما و غیره) به صورت پویا توسط router.js در آن تزریق می‌شود. همچنین، تمام قالب‌های (<template>) لازم برای ساخت کارت‌های داینامیک (مانند کارت خبر یا عضو) در این فایل تعریف شده‌اند تا JavaScript بتواند از آن‌ها برای ساخت المان‌های تکراری استفاده کند.

login.html, admin.html, news.html, ...: این‌ها در واقع "قطعه" (Fragment)هایی از HTML هستند، نه صفحات کامل. آن‌ها فاقد تگ‌های <html> یا <body> هستند و فقط شامل ساختار بخش محتوایی خودشان می‌باشند. وقتی کاربر به صفحه‌ی مثلاً /login می‌رود، router.js محتوای فایل login.html را واکشی کرده و آن را درون تگ <main> در index.html قرار می‌دهد.

فایل CSS
assets/css/style.css: این فایل مسئول تمام ظاهر و استایل وب‌سایت است. این فایل با استفاده از متغیرهای CSS (--primary-color, و غیره) طراحی شده است که امکان تغییر تم (روشن/تاریک) را به راحتی فراهم می‌کند. استایل‌ها به صورت ماژولار و کامنت‌گذاری شده برای بخش‌های مختلف (هدر، فرم‌ها، کارت‌ها، مدال‌ها) نوشته شده‌اند تا نگهداری و توسعه‌ی آن‌ها آسان باشد.

بخش ۳: تشریح ماژول‌های JavaScript
کد JavaScript شما به صورت ماژولار طراحی شده است، که هر فایل مسئولیت مشخصی دارد. این کار باعث خوانایی، نگهداری و توسعه‌پذیری آسان کد می‌شود.

۱. main.js (نقطه شروع و هماهنگ‌کننده اصلی)
این فایل قلب تپنده برنامه شماست. به محض اینکه DOM (ساختار HTML) به طور کامل بارگذاری شد، این اسکریپت اجرا می‌شود و وظایف زیر را به ترتیب انجام می‌دهد:

setInitialState: تنظیمات اولیه مانند ذخیره محتوای اولیه صفحه اصلی در حافظه پنهان و تنظیم سال جاری در فوتر را انجام می‌دهد.

initializeTheme: سیستم تغییر تم (روشن/تاریک/سیستم) را بر اساس انتخاب قبلی کاربر (ذخیره شده در localStorage) فعال می‌کند.

initializeParticles: انیمیشن ذرات پس‌زمینه را با استفاده از کتابخانه tsParticles راه‌اندازی می‌کند.

initializeGlobalUI: شنونده‌های رویداد (Event Listeners) عمومی را به عناصر ثابت صفحه مانند دکمه منوی موبایل، مدال عمومی و دکمه خروج متصل می‌کند.

راه‌اندازی سیستم احراز هویت:

getSession: در ابتدای بارگذاری، وضعیت ورود کاربر را از Supabase استعلام می‌کند.

handleAuthChange: این تابع کلیدی، هسته‌ی مدیریت وضعیت کاربر است. این تابع هم در ابتدای بارگذاری و هم هر زمان که وضعیت ورود کاربر تغییر کند (ورود یا خروج) فراخوانی می‌شود. وظیفه آن این است که:

اگر کاربر وارد شده بود (user وجود داشت)، تابع getProfile را فراخوانی می‌کند تا اطلاعات پروفایل (شامل نام و نقش) را از پایگاه داده دریافت کند.

اگر کاربر خارج شده بود، اطلاعات پروفایل را از حافظه پاک می‌کند.

در نهایت، تابع updateUserUI را با اطلاعات کاربر و پروفایل به‌روز شده فراخوانی می‌کند تا رابط کاربری مطابق با آن تغییر کند.

onAuthStateChange: یک شنونده دائمی را فعال می‌کند که به محض ورود یا خروج کاربر، به صورت خودکار تابع handleAuthChange را اجرا کند. این مکانیزم تضمین می‌کند که UI همیشه با وضعیت واقعی کاربر هماهنگ باشد.

loadMembers: اطلاعات اولیه اعضای انجمن را از پایگاه داده دریافت و در حافظه (state) ذخیره می‌کند تا در صفحات دیگر مانند "اخبار" برای نمایش نام نویسنده استفاده شود.

initializeRouter: در نهایت، سیستم مسیریابی (SPA) را فعال می‌کند تا برنامه آماده پاسخ به تغییرات URL (هش) باشد.

۲. state.js (مخزن مرکزی داده‌ها)
این فایل یک منبع حقیقت واحد (Single Source of Truth) برای کل برنامه شماست. تمام داده‌های مهم و وضعیت‌های برنامه در یک آبجکت state نگهداری می‌شوند. این کار از پراکندگی داده‌ها جلوگیری کرده و مدیریت وضعیت را بسیار ساده می‌کند.

user, session, profile: وضعیت فعلی احراز هویت و اطلاعات کاربر وارد شده را نگهداری می‌کنند.

allNews, membersMap, allEvents, ...: داده‌هایی که از Supabase واکشی می‌شوند (مانند لیست اخبار، اعضا، رویدادها) در اینجا ذخیره می‌شوند تا در صورت نیاز، بدون درخواست مجدد از سرور، در دسترس باشند.

pageCache: برای افزایش سرعت، محتوای فایل‌های HTML صفحات مختلف پس از اولین بار واکشی، در اینجا ذخیره می‌شود تا در مراجعات بعدی، مستقیماً از حافظه خوانده شوند.

۳. api.js (لایه ارتباط با سرور)
این ماژول به عنوان تنها نقطه تماس برنامه شما با Supabase عمل می‌کند. تمام منطق مربوط به ارسال درخواست به سرور و دریافت پاسخ در این فایل متمرکز شده است. این کار باعث می‌شود که اگر در آینده نیاز به تغییر سرویس‌دهنده بک‌اند داشتید، فقط این فایل نیاز به تغییر داشته باشد.

supabaseClient: یک نمونه از کلاینت Supabase با استفاده از URL و کلید پروژه شما ایجاد می‌کند.

توابع احراز هویت (getSession, sendSignupOtp, signInWithPassword, ...): هر کدام از این توابع، یکی از متدهای کتابخانه supabase-js را برای انجام یک عملیات خاص احراز هویت (مانند ارسال کد تایید، ورود با رمز عبور، خروج) فراخوانی می‌کنند.

توابع پروفایل (getProfile, updateProfile): این توابع مسئول خواندن و نوشتن اطلاعات در جدول profiles شما هستند. آن‌ها از متدهای select و upsert کلاینت Supabase برای تعامل با پایگاه داده استفاده می‌کنند.

توابع واکشی داده (loadMembers, loadEvents, ...): این توابع مسئول دریافت داده‌های عمومی مانند لیست اعضا، رویدادها و غیره از جداول مربوطه در Supabase هستند.

۴. ui.js (مدیریت رابط کاربری و تعاملات)
این ماژول مسئول تمام تغییرات در DOM (ساختار HTML صفحه) و مدیریت تعاملات کاربر است. هیچ ماژول دیگری نباید مستقیماً DOM را دستکاری کند.

updateUserUI: این مهم‌ترین تابع در این ماژول است. بر اساس اطلاعات کاربر (user) و پروفایل (profile) که به عنوان ورودی دریافت می‌کند، تصمیم می‌گیرد که کدام عناصر در منو نمایش داده شوند (دکمه "ورود/ثبت‌نام" یا پیام خوشامدگویی و دکمه خروج). همچنین، این تابع بررسی می‌کند که اگر نقش کاربر admin باشد، لینک "پنل ادمین" را نمایش دهد.

initializeAuthForm: منطق پیچیده‌ی فرم ورود و ثبت‌نام چندمرحله‌ای در این تابع پیاده‌سازی شده است. این تابع یک شنونده رویداد submit به فرم اضافه می‌کند و بر اساس اینکه کاربر در کدام مرحله قرار دارد (email-step, password-step, otp-step, ...)، تابع مناسبی از api.js را فراخوانی می‌کند و بر اساس پاسخ سرور، کاربر را به مرحله بعد هدایت کرده یا پیام خطا نمایش می‌دهد.

showProfileModal: این تابع به صورت پویا HTML مدال پروفایل را ایجاد کرده، آن را با اطلاعات فعلی کاربر پر می‌کند و نمایش می‌دهد. همچنین منطق مربوط به فرم ذخیره اطلاعات پروفایل را نیز در خود دارد.

initializeGlobalUI: شنونده‌های رویداد برای عناصری که در تمام صفحات ثابت هستند (مانند منوی اصلی) را تنظیم می‌کند.

۵. router.js (موتور برنامه تک‌صفحه‌ای)
این ماژول، موتور اصلی SPA شماست. وظیفه آن گوش دادن به تغییرات URL (بخش بعد از #) و رندر کردن محتوای مناسب بر اساس آن است.

handleNavigation: این تابع در هر بار تغییر URL اجرا می‌شود. این تابع مسیر (path) را از URL استخراج کرده و تصمیم می‌گیرد چه کاری انجام دهد:

اگر مسیر مربوط به یک صفحه استاتیک (مانند /login یا /contact) باشد، محتوای فایل HTML مربوطه را (از کش یا با واکشی جدید) در تگ <main> قرار می‌دهد.

سپس، آبجکت pageRenderers را بررسی می‌کند. این آبجکت، هر مسیر را به یک تابع "راه‌انداز" متصل می‌کند. برای مثال، اگر مسیر /login باشد، تابع initializeAuthForm از ui.js را اجرا می‌کند.

initializeRouter: این تابع، شنونده رویداد popstate را به پنجره مرورگر اضافه می‌کند تا هر بار که کاربر از دکمه‌های Back/Forward مرورگر استفاده می‌کند، handleNavigation اجرا شود. همچنین این تابع را یک بار در ابتدا اجرا می‌کند تا محتوای اولیه صفحه بر اساس URL فعلی رندر شود.

۶. components.js (توابع رندرکننده محتوای پویا)
این ماژول شامل توابعی است که مسئول ساخت و نمایش لیست‌های داینامیک از داده‌ها هستند. این توابع، داده‌ها را از state.js می‌خوانند، از قالب‌های (<template>) موجود در index.html استفاده می‌کنند و المان‌های HTML را در صفحه ایجاد می‌کنند.

loadLatestNews: سه خبر آخر را برای نمایش در صفحه اصلی رندر می‌کند.

renderMembersPage: لیست تمام اعضای انجمن را در صفحه اعضا نمایش می‌دهد.

renderEventsPage: رویدادها را به دو دسته "آینده" و "گذشته" تقسیم کرده و در تب‌های جداگانه نمایش می‌دهد.

loadMoreNews: برای صفحه آرشیو اخبار، با اسکرول کردن کاربر، اخبار بیشتری را به صورت صفحه‌بندی شده (Pagination) بارگذاری و نمایش می‌دهد.

بخش ۴: جریان کامل فرآیند احراز هویت
بیایید یک سناریوی کامل از ثبت‌نام یک کاربر جدید تا تبدیل شدن او به ادمین را دنبال کنیم:

ورود به صفحه لاگین: کاربر روی دکمه "ورود/ثبت‌نام" کلیک می‌کند. router.js مسیر #/login را تشخیص داده، محتوای login.html را رندر کرده و تابع initializeAuthForm را اجرا می‌کند.

وارد کردن ایمیل: کاربر ایمیل خود (که قبلاً در سیستم وجود ندارد) را وارد و دکمه "ادامه" را می‌زند.

initializeAuthForm تابع checkUserExists از api.js را فراخوانی می‌کند.

این تابع، RPC user_exists در Supabase را صدا می‌زند. پاسخ false است.

initializeAuthForm متوجه می‌شود که این یک کاربر جدید است، پس تابع sendSignupOtp را فراخوانی می‌کند.

Supabase یک کد تایید ۶ رقمی به ایمیل کاربر ارسال می‌کند.

UI به otp-step تغییر می‌کند.

تایید کد: کاربر کد را وارد می‌کند.

تابع verifyOtp فراخوانی می‌شود. Supabase کد را تایید کرده و یک جلسه (session) موقت برای کاربر ایجاد می‌کند.

UI به set-password-step تغییر می‌کند.

تعیین رمز عبور: کاربر رمز عبور خود را تعیین می‌کند.

تابع updateUserPassword فراخوانی می‌شود. Supabase رمز عبور را برای کاربر ذخیره کرده و جلسه او را به یک جلسه کامل و دائمی تبدیل می‌کند.

در این لحظه، Trigger on_auth_user_created در پایگاه داده فعال شده و یک ردیف جدید با id این کاربر و role پیش‌فرض 'user' در جدول profiles ایجاد می‌کند.

تکمیل پروفایل:

به جای هدایت به صفحه اصلی، initializeAuthForm تابع getProfile را فراخوانی می‌کند (که پروفایل خالی اما با نقش 'user' را برمی‌گرداند).

سپس showProfileModal اجرا شده و مدال تکمیل پروفایل به کاربر نمایش داده می‌شود.

کاربر نام و نام خانوادگی خود را وارد و ذخیره می‌کند. تابع updateProfile این اطلاعات را در ردیف مربوط به او در جدول profiles ذخیره می‌کند.

تبدیل به ادمین: شما به عنوان مدیر، به Table Editor در Supabase رفته، ردیف این کاربر را در جدول profiles پیدا کرده و مقدار ستون role او را به admin تغییر می‌دهید.

ورود مجدد و دسترسی ادمین:

کاربر از سایت خارج شده و دوباره با ایمیل و رمز عبور خود وارد می‌شود.

پس از ورود موفق، main.js تابع handleAuthChange را اجرا می‌کند.

handleAuthChange تابع getProfile را فراخوانی می‌کند.

این بار، getProfile اطلاعات کامل پروفایل شامل {..., role: 'admin'} را برمی‌گرداند.

این اطلاعات به updateUserUI پاس داده می‌شود.

updateUserUI شرط profile?.role === 'admin' را بررسی کرده، آن را true می‌یابد و لینک "پنل ادمین" را نمایش می‌دهد.